##### 1. SMARTPCA #####
# Bash

# Crear un archivo con la identificación de todos los individuos en formato .txt

# Crear un archivo que indique el directorio de los archivos de entrada y la ubicación para los archivos de salida. Añadir parámetros deseados.
  genotypename: /home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/Inputs_files/Popref_awaZ.bed
  snpname: /home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/Inputs_files/Popref_awaZ.bim
  indivname: /home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/Inputs_files/Popref_awaZ.fam
  evecoutname: /home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/outputs_smartpca/eigenvectors
  evaloutname: /home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/outputs_smartpca/eigenvalues
  numoutlieriter: 0

# Crear un archivo ejecutable para Linux (.sh)
  #!/bin/bash
  parfile_dir="/home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom"
  logfile="/home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/outputs_smartpca"
  smartpca -p $parfile_dir/Popref_awaZ.txt > $logfile/logfile



##### 2. ANÁLISIS DE COMPONENTES PRINCIPALES EN RSTUDIO #####
# R

# Establecer directorio de trabajo 
  setwd("/home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom")

## Crear el dataframe
  Eigvecdat_RefAwa = read.table("/home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/eigenvectors", col.names = c("ID", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11"))
  # Eliminar la última columna usando la función subset()
  Eigvecdata_RefAwa <- subset(Eigvecdat_RefAwa, select = -c(PC11))
  # Añadir la columna de las poblaciones al dataframe
  Pops = read.table("/home/alu/TFG/Consanguinidad/PCAs_finales/Consanguinidad/PCA_refawa_zoom/ind.txt", col.names = c("ID", "Poblaciones", "Grupo"))
    Eivecdata_RefAwaZ <- merge(Eigvecdata_RefAwa, Pops, by='ID')

# Ordenar la base de datos por PC1 ascendente 
  Eivecdata_RefAwaZ <- Eivecdata_RefAwaZ[order(Eivecdata_RefAwaZ$PC1, decreasing = FALSE),]
  row.names(Eivecdata_RefAwaZ) <- 1 : 179
  
library(dplyr)
# Identificar poblaciones del clúster de interés
  Eivecdata_RefAwaZ <- filter(Eivecdata_RefAwaZ, row_number() <= 100)

# Calcular los límites para centrar los datos
  xmin <- min(Eivecdata_RefAwaZ$PC1)
  xmax <- max(Eivecdata_RefAwaZ$PC1)
  ymin <- min(Eivecdata_RefAwaZ$PC2)
  ymax <- max(Eivecdata_RefAwaZ$PC2)

# Establecer los límites para que sean simétricos 
  xlim <- c(-0.067, -0.023)
  ylim <- c(-0.0110, 0.0152)

# Definir un vector de formas pch para cada población, conservando mismo formato que en el resto de figuras del estudio
  shapes <- c(0, 2, 3, 5, 6, 8, 10, 11, 12, 15, 16, 17, 19, 20, 21, 22, 25)

# Realizar el análisis de componentes principales (PCA)
  pca_result <- prcomp(Eivecdata_RefAwaZ[,c("PC1", "PC2")], scale. = TRUE)

# Obtener el porcentaje de varianza explicada por cada componente
  var_exp <- summary(pca_result)$importance[2,]

library("dplyr")
# Seleccionar manualmente los individuos de interés
individuos_seleccionados <- c("MG012.CEL", "MG007.CEL", "MG016.CEL", "MG029.CEL", "MG015.CEL", "MG027.CEL", "MG002.CEL", "MG019.CEL", "MG009.CEL", "MG022.CEL", "MG020.CEL", "MG001.CEL", "MG004.CEL", "MG026.CEL",
                              "EC021", "EC008", "EC18", "EC013", "EC024", "EC003", "EC022", "EC002", "EC015", "EC012", "EC010", "EC020", "EC005", "EC007", "EC023", "EC006", "EC019",
                              "AMZ142", "AMZ150", "SMAR-10", "SMAR-9", "AMZ143", "AMZ149", "SMAR-7",
                             "CH106", "CH116", "CH111", "CH105", "CH109", "CH107", "CH117", "CH112", "CH108", "CH104")

# Filtrar los datos para incluir solo los individuos seleccionados
  datos_seleccionados <- Eivecdata_RefAwaZ %>%
    filter(ID %in% individuos_seleccionados)

# Graficar los datos filtrados con límites especificados manualmente
  ggplot(data = Eivecdata_RefAwaZ, aes(x = PC1, y = PC2, col = Poblaciones, shape = Poblaciones)) +
    geom_point() +
    stat_ellipse(data = datos_seleccionados, level = 0.95) + # Las elipses deben tener el mismo color que el individuo del grupo
    scale_shape_manual(values = shapes) +
    coord_cartesian(xlim = xlim, ylim = ylim) +  # Establecer los límites manualmente
    theme(
      axis.line = element_line(color='black'),
      plot.background = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      panel.background = element_blank()
    ) +
    # Agregar etiquetas de porcentaje de varianza explicada como leyenda
    labs(x = paste("PC1 (", round(var_exp[1] * 100, 2), "%)"),
         y = paste("PC2 (", round(var_exp[2] * 100, 2), "%)"))
