##### 1. SMARTPCA #####
# Bash

# Crear un archivo con la identificación de todos los individuos en formato .txt

# Crear un archivo que indique el directorio de los archivos de entrada y la ubicación para los archivos de salida. Añadir parámetros deseados.
  genotypename: /home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc_zoom/Inputs_files/Cons0.20Z.bed
  snpname: /home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc_zoom/Inputs_files/Cons0.20Z.bim
  indivname: /home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc_zoom/Inputs_files/Cons0.20Z.fam
  evecoutname: /home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc_zoom/outputs_smartpca/eigenvectors
  evaloutname: /home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc_zoom/outputs_smartpca/eigenvalues
  numoutlieriter: 0

# Crear un archivo ejecutable para Linux (.sh)
  #!/bin/bash
  parfile_dir="/home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc"
  logfile="/home/alu/TFG/Consanguinidad/PCAs_finales/Sin_Consanguinidad/PCAsc/outputs_smartpca"
  smartpca -p $parfile_dir/Cons0.20Z.txt > $logfile/logfile



##### 2. ANÁLISIS DE COMPONENTES PRINCIPALES EN RSTUDIO #####
# R

# Establecer el directorio de trabajo
setwd("/home/alu/TFG/Consanguinidad/PCAs finales/Sin_consanguinidad/PCAsc_zoom")

## Crear el dataframe
  Eigvecdat_Cons0.20 = read.table("/home/alu/TFG/Consanguinidad/PCAs finales/Sin_consanguinidad/PCAsc_zoom/eigenvectors", col.names = c("ID", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11"))
  # Eliminarla última columna usando la función subset()
  Eigvecdata_Cns0.20 <- subset(Eigvecdat_Cons0.20, select = -c(PC11))
  # Añadir la columna de las poblaciones al dataframe
  Pops = read.table("/home/alu/TFG/Consanguinidad/PCAs finales/Sin_consanguinidad/PCAsc_zoom/ind.txt", col.names = c("ID", "Poblaciones"))
    Eivecdata_MenorCns <- merge(Eigvecdata_Cns0.20, Pops, by='ID')

library(dplyr)
# Ordenar la base de datos por PC1 ascendente 
  Eivecdata_SC <- Eivecdata_MenorCns[order(Eivecdata_MenorCns$PC1, decreasing = FALSE),]
  row.names(Eivecdata_SC) <- 1 : 143
# Identificar poblaciones del clúster de interés
  Eivecdata_SC <- filter(Eivecdata_SC, row_number() <= 98)

# Calcular los límites para centrar los datos
  xmin <- min(Eivecdata_SC$PC1)
  xmax <- max(Eivecdata_SC$PC1)
  ymin <- min(Eivecdata_SC$PC2)
  ymax <- max(Eivecdata_SC$PC2)

# Establecer los límites para que sean simétricos 
  xlim <- c(-0.0762, -0.0030)
  ylim <- c(-0.0185, 0.0166)

# Definir un vector de formas pch para cada población 
  shapes <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25)

# Realizar el análisis de componentes principales (PCA)
  pca_result <- prcomp(Eivecdata_SC[,c("PC1", "PC2")], scale. = TRUE)

# Obtener el porcentaje de varianza explicada por cada componente
  var_exp <- summary(pca_result)$importance[2,]

library("dplyr")

# Seleccionar manualmente los individuos de interés 
  individuos_seleccionados <- c("AMZ149", "AMZ143", "SMAR-9", "SMAR-10", "AMZ150", "AMZ144",
                                "EC010", "EC015", "EC022", "EC003", "EC013", "EC024", "EC018", "EC008", "EC021",
                                "CH105", "CH111", "CH112", "CH106", "CH116", "CH107", "CH104", "CH109", "CH108")

# Filtrar los datos para incluir solo los individuos seleccionados
  datos_seleccionados <- Eivecdata_SC %>%
    filter(ID %in% individuos_seleccionados)

# Realizar el gráfico especificando los límites manualmente
  ggplot(data = Eivecdata_SC, aes(x = PC1, y = PC2, col = Poblaciones, shape = Poblaciones)) +
    geom_point() +
    stat_ellipse(data = datos_seleccionados, level = 0.95) + # Las elipses deben tener el mismo color que el individuo del grupo
    scale_shape_manual(values = shapes) +
    coord_cartesian(xlim = xlim, ylim = ylim) +  # Establecer los límites manualmente
    theme(
      axis.line = element_line(color='black'),
      plot.background = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      panel.background = element_blank()
    ) +
    # Agregar etiquetas de porcentaje de varianza explicada como leyenda
    labs(x = paste("PC1 (", round(var_exp[1] * 100, 2), "%)"),
         y = paste("PC2 (", round(var_exp[2] * 100, 2), "%)"))
