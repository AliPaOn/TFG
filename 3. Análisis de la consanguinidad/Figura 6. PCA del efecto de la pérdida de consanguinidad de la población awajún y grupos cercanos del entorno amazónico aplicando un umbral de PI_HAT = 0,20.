




##### 2. ANÁLISIS DE COMPONENTES PRINCIPALES EN RSTUDIO #####

#setwd ggplot
setwd("/home/alu/TFG/Consanguinidad/PCAs finales/Sin consanguinidad/PCAsc_zoom")

#Creo el dataframe
Eigvecdat_Cons0.20 = read.table("/home/alu/TFG/Consanguinidad/PCAs finales/Sin consanguinidad/PCAsc_zoom/eigenvectors", col.names = c("ID", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11"))
# ELimino la última columna usando subset()
Eigvecdata_Cns0.20 <- subset(Eigvecdat_Cons0.20, select = -c(PC11))
#Añado la columna de las poblaciones al dataframe
Pops = read.table("/home/alu/TFG/Consanguinidad/PCAs finales/Sin consanguinidad/PCAsc_zoom/ind.txt", col.names = c("ID", "Poblaciones"))
Eivecdata_MenorCns <- merge(Eigvecdata_Cns0.20, Pops, by='ID')

library(dplyr)
#Ordeno la base de datos por PC1 ascendente 
Eivecdata_SC <- Eivecdata_MenorCns[order(Eivecdata_MenorCns$PC1, decreasing = FALSE),]
row.names(Eivecdata_SC) <- 1 : 143
Eivecdata_SC <- filter(Eivecdata_SC, row_number() <= 98)

#####
# Calculo los límites para centrar los datos
xmin <- min(Eivecdata_SC$PC1)
xmax <- max(Eivecdata_SC$PC1)
ymin <- min(Eivecdata_SC$PC2)
ymax <- max(Eivecdata_SC$PC2)

# Calculo el mayor valor absoluto entre los límites
#max_abs <- max(abs(c(xmin, xmax, ymin, ymax)))

# Establezco los límites para que sean simétricos alrededor del mayor valor absoluto
xlim <- c(-0.0762, -0.0030)
ylim <- c(-0.0185, 0.0166)

# Defino un vector de formas pch para cada población (28 formas deberían ser)
shapes <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25)

# Realizar el análisis de componentes principales (PCA)
pca_result <- prcomp(Eivecdata_SC[,c("PC1", "PC2")], scale. = TRUE)
# Obtener el porcentaje de varianza explicada por cada componente
var_exp <- summary(pca_result)$importance[2,]

#Instalo previamente ggplot2 y le llamo desde la librería porque si no, no encuentra la función. 
library("ggplot2")
library("dplyr")

# Seleccionar manualmente los individuos de interés (por ejemplo, ID 1, 2 y 3)
individuos_seleccionados <- c("AMZ149", "AMZ143", "SMAR-9", "SMAR-10", "AMZ150", "AMZ144",
                              "EC010", "EC015", "EC022", "EC003", "EC013", "EC024", "EC018", "EC008", "EC021",
                              "CH105", "CH111", "CH112", "CH106", "CH116", "CH107", "CH104", "CH109", "CH108")

# Filtrar los datos para incluir solo los individuos seleccionados
datos_seleccionados <- Eivecdata_SC %>%
  filter(ID %in% individuos_seleccionados)

# Grafico los datos con límites especificados manualmente
ggplot(data = Eivecdata_SC, aes(x = PC1, y = PC2, col = Poblaciones, shape = Poblaciones)) +
  geom_point() +
  stat_ellipse(data = datos_seleccionados, level = 0.95) + # Deja que las elipses tengan el mismo color que el individuo del grupo
  scale_shape_manual(values = shapes) +
  coord_cartesian(xlim = xlim, ylim = ylim) +  # Establece los límites manualmente
  theme(
    axis.line = element_line(color='black'),
    plot.background = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank()
  ) +
  # Agregar etiquetas de porcentaje de varianza explicada como leyenda
  labs(x = paste("PC1 (", round(var_exp[1] * 100, 2), "%)"),
       y = paste("PC2 (", round(var_exp[2] * 100, 2), "%)"))
